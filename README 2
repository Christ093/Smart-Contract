# RequireAssertRevert Smart Contract

This project contains a Solidity smart contract demonstrating the use of error handling mechanisms such as `require()`, `assert()`, and `revert()` in smart contract development. The contract allows users to deposit, withdraw, and set ownership with specific conditions, ensuring robust error handling and security.

## Contract Overview

The `RequireAssertRevert` smart contract includes the following functionalities:

1. **Deposit Funds**: Allows users to deposit Ether into the contract. The contract ensures that the deposited amount is greater than zero and that the value sent with the transaction matches the intended deposit amount.
2. **Withdraw Funds**: Only the owner can withdraw funds. The contract ensures the withdrawal amount is not greater than the contract's balance, preventing underflows.
3. **Change Ownership**: The owner of the contract can transfer ownership to a new address. The contract ensures the new owner's address is not zero.

### Key Features:
- **require()**: Validates conditions like non-zero deposits and matching Ether values for deposits.
- **assert()**: Ensures that only the owner can withdraw and that the balance cannot go negative.
- **revert()**: Reverts transactions with an appropriate error message if the new owner address is zero.

## Functions

### 1. `deposit(uint amount)`
- **Parameters**: `amount` (uint) - the amount of Ether the sender wants to deposit.
- **Usage**: Deposits the specified amount of Ether into the contract.
- **Conditions**:
  - Ensures the `amount` is greater than zero.
  - Ensures that the Ether sent with the transaction matches the `amount`.

### 2. `withdraw(uint amount)`
- **Parameters**: `amount` (uint) - the amount of Ether to withdraw.
- **Usage**: Allows the owner to withdraw Ether from the contract.
- **Conditions**:
  - Only the owner can withdraw.
  - The withdrawal amount must not exceed the current balance.

### 3. `setOwner(address newOwner)`
- **Parameters**: `newOwner` (address) - the address of the new owner.
- **Usage**: Allows the current owner to transfer ownership to a new address.
- **Conditions**:
  - The new owner address cannot be zero.

## Error Handling

### `require()`
The `require()` function is used to validate conditions before proceeding with any changes. If the condition fails, the transaction is reverted with a provided error message:
- `"Deposit amount must be greater than zero"`
- `"Ether sent must match the deposit amount"`
- `"Only the owner can change ownership"`

### `assert()`
The `assert()` function is used to ensure the integrity of the contract's state:
- Ensures that only the owner can withdraw funds: `assert(msg.sender == owner)`
- Ensures the balance cannot go negative when withdrawing: `assert(newBalance >= 0)`

### `revert()`
The `revert()` function is used to explicitly cancel the transaction and provide an error message:
- `"New owner address cannot be zero"` if trying to set the owner to an invalid address.

## How to Deploy and Interact with the Contract

### Prerequisites:
- **Remix IDE**: Use Remix for compiling and deploying the contract. Visit [Remix IDE](https://remix.ethereum.org/) to start.

### Deployment:
1. Copy the contract code into Remix IDE.
2. Compile the contract using the Solidity compiler in Remix.
3. Deploy the contract to the Remix VM (or a testnet like Rinkeby for real-world interactions).
4. After deployment, interact with the contract functions from the **Deployed Contracts** section.

### Interacting with Functions:
- **Deposit**: Call the `deposit()` function, providing the deposit amount and sending the corresponding Ether.
- **Withdraw**: Call the `withdraw()` function. Only the owner can perform this action.
- **Change Ownership**: Use the `setOwner()` function to transfer ownership to a new address. Ensure the new address is not zero.

## Testing

To test the contract’s functionality, you can use Remix IDE’s built-in environment to:
- Deposit Ether with valid and invalid amounts to test `require()`.
- Withdraw Ether with valid and invalid conditions to test `assert()`.
- Set a new owner and attempt to set an invalid owner (zero address) to test `revert()`.

### Example Test Cases:
1. Deposit a valid amount and check if the contract balance is updated.
2. Attempt to withdraw funds as a non-owner (should fail with `assert()`).
3. Attempt to set the owner to `0x0000000000000000000000000000000000000000` (should fail with `revert()`).

